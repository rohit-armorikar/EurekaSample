package com.sfg8qv.FlightSearch.service;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.microsoft.azure.documentdb.Database;
import com.microsoft.azure.documentdb.DocumentClient;
import com.microsoft.azure.documentdb.DocumentClientException;
import com.sfg8qv.FlightSearch.controller.FlightSearchData;

@Component
public class FlightService {

	@Autowired
	DocumentClient objDocumentClient;

	public void saveFlightDetails( FlightSearchData objFlightSearchData )
	{
		objDocumentClient.
	}

	private void createDatabaseIfNotExists(String databaseName) throws DocumentClientException, IOException {
		String databaseLink = String.format("/dbs/%s", databaseName);

		// Check to verify a database with the id=FamilyDB does not exist
		try {
			objDocumentClient.readDatabase(databaseLink, null);

		} catch (DocumentClientException de) {
			// If the database does not exist, create a new database
			if (de.getStatusCode() == 404) {
				Database database = new Database();
				database.setId(databaseName);

				objDocumentClient.createDatabase(database, null);

			} else {
				throw de;
			}
		}
	}

	private void createDocumentCollectionIfNotExists(String databaseName, String collectionName)
			throws IOException, DocumentClientException {
		String databaseLink = String.format("/dbs/%s", databaseName);
		String collectionLink = String.format("/dbs/%s/colls/%s", databaseName, collectionName);

		try {
			this.client.readCollection(collectionLink, null);
			writeToConsoleAndPromptToContinue(String.format("Found %s", collectionName));
		} catch (DocumentClientException de) {
			// If the document collection does not exist, create a new
			// collection
			if (de.getStatusCode() == 404) {
				DocumentCollection collectionInfo = new DocumentCollection();
				collectionInfo.setId(collectionName);

				// Optionally, you can configure the indexing policy of a
				// collection. Here we configure collections for maximum query
				// flexibility including string range queries.
				RangeIndex index = new RangeIndex(DataType.String);
				index.setPrecision(-1);

				collectionInfo.setIndexingPolicy(new IndexingPolicy(new Index[] { index }));

				// DocumentDB collections can be reserved with throughput
				// specified in request units/second. 1 RU is a normalized
				// request equivalent to the read of a 1KB document. Here we
				// create a collection with 400 RU/s.
				RequestOptions requestOptions = new RequestOptions();
				requestOptions.setOfferThroughput(400);

				this.client.createCollection(databaseLink, collectionInfo, requestOptions);

				this.writeToConsoleAndPromptToContinue(String.format("Created %s", collectionName));
			} else {
				throw de;
			}
		}

	}

}
